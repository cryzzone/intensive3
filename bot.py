import telebot
from telebot import types
import pandas as pd
import datetime
import time
import requests
import sys
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import io
from model import load_data, train_model, predict_future

TOKEN = "7923521036:AAHcSpyCU-y8-YmRQQfOyx43ZfupNn-LFAc"
bot = telebot.TeleBot(TOKEN, threaded=True)

class States:
    WAITING_DATE = 1
    WAITING_PERIODS = 2

user_state = {}
predictions_data = {}

def init_model():
    try:
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...")
        train, test = load_data()
        model, train_with_predictions = train_model(train)
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ò–õ–ò —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É (—á—Ç–æ –±–æ–ª—å—à–µ)
        last_known_date = test['date'].iloc[-1] if not test.empty else train['date'].iloc[-1]
        current_date = pd.to_datetime(datetime.datetime.now())
        last_date = max(last_known_date, current_date)
        
        print("–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        return model, train_with_predictions, test, last_date
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        sys.exit(1)

def generate_plots(train_data, test_data, predictions, focus_date=None, periods=4):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–≤–∞ –≥—Ä–∞—Ñ–∏–∫–∞: —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∏ –æ–±—â–∏–π"""
    plt.figure(figsize=(14, 12))
    
    # 1. –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ (–≤–µ—Ä—Ö–Ω–∏–π)
    ax1 = plt.subplot(2, 1, 1)
    if focus_date:
        start_date = focus_date - pd.Timedelta(weeks=2)
        end_date = focus_date + pd.Timedelta(weeks=periods+2)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        zoom_train = train_data[(train_data['date'] >= start_date) & 
                              (train_data['date'] <= end_date)]
        zoom_test = test_data[(test_data['date'] >= start_date) & 
                            (test_data['date'] <= end_date)] if test_data is not None else None
        zoom_pred = predictions[(predictions['date'] >= focus_date)]
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ
        if not zoom_train.empty:
            ax1.plot(zoom_train['date'], zoom_train['price'], 'b-', label='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ')
        if zoom_test is not None and not zoom_test.empty:
            ax1.plot(zoom_test['date'], zoom_test['price'], 'b-')
        if not zoom_pred.empty:
            ax1.plot(zoom_pred['date'], zoom_pred['predicted_price'], 'r-o', 
                    linewidth=2, markersize=8, label='–ü—Ä–æ–≥–Ω–æ–∑')
        
        ax1.set_title(f"–£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –≤–∏–¥ ({focus_date.strftime('%d.%m.%Y')} + {periods} –Ω–µ–¥–µ–ª—å)")
        ax1.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
        ax1.grid(True)
        ax1.legend()
    
    # 2. –û–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫ (–Ω–∏–∂–Ω–∏–π)
    ax2 = plt.subplot(2, 1, 2)
    ax2.plot(train_data['date'], train_data['price'], 'b-', label='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ')
    if test_data is not None:
        ax2.plot(test_data['date'], test_data['price'], 'b-')
    ax2.plot(predictions['date'], predictions['predicted_price'], 'r-o', 
            linewidth=2, markersize=6, label='–ü—Ä–æ–≥–Ω–æ–∑')
    
    ax2.set_title("–û–±—â–∏–π –≤–∏–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞")
    ax2.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
    ax2.grid(True)
    ax2.legend()
    
    plt.tight_layout()
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=120)
    buf.seek(0)
    plt.close()
    return buf

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ê–≤—Ç–æ–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –Ω–µ–¥–µ–ª—å")
    btn2 = types.KeyboardButton("–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
    markup.add(btn1, btn2)
    
    bot.send_message(
        message.chat.id,
        "üîÆ –ë–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "- '–ê–≤—Ç–æ–ø—Ä–æ–≥–Ω–æ–∑' - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –Ω–µ–¥–µ–ª—å\n"
        "- '–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑' - –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é –¥–∞—Ç—É",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == "–ê–≤—Ç–æ–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –Ω–µ–¥–µ–ª—å")
def auto_predict(message):
    try:
        bot.send_chat_action(message.chat.id, 'typing')
        
        # –ë–µ—Ä–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É, –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—É—é –¥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
        today = pd.to_datetime(datetime.datetime.now())
        next_monday = today + pd.Timedelta(days=(7 - today.weekday()))
        
        # –î–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
        predictions = predict_future(model, next_monday, periods=6)
        
        response = "üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –Ω–µ–¥–µ–ª—å —Å {}:\n\n".format(
            next_monday.strftime('%d.%m.%Y'))
        
        for _, row in predictions.iterrows():
            response += f"üìÖ {row['date'].strftime('%d.%m.%Y')}: {int(row['predicted_price']):,} —Ä—É–±.\n"
        
        plot_buf = generate_plots(train_data, test_data, predictions, next_monday, 6)
        bot.send_photo(message.chat.id, photo=plot_buf)
        bot.send_message(message.chat.id, response)
        
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")

@bot.message_handler(func=lambda m: m.text == "–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
def start_custom_predict(message):
    msg = bot.send_message(
        message.chat.id,
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):"
    )
    user_state[message.chat.id] = States.WAITING_DATE
    bot.register_next_step_handler(msg, process_date)

def process_date(message):
    try:
        input_date = datetime.datetime.strptime(message.text, "%d.%m.%Y")
        predictions_data[message.chat.id] = {'date': input_date}
        
        msg = bot.send_message(
            message.chat.id,
            "‚è≥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å (1-12):"
        )
        user_state[message.chat.id] = States.WAITING_PERIODS
        bot.register_next_step_handler(msg, process_periods)
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
        )
        bot.register_next_step_handler(message, process_date)

def process_periods(message):
    try:
        periods = int(message.text)
        if not 1 <= periods <= 12:
            raise ValueError
        
        user_data = predictions_data[message.chat.id]
        bot.send_chat_action(message.chat.id, 'typing')
        predictions = predict_future(model, user_data['date'], periods)
        
        response = f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {periods} –Ω–µ–¥–µ–ª—å —Å {user_data['date'].strftime('%d.%m.%Y')}:\n\n"
        for _, row in predictions.iterrows():
            response += f"üìÖ {row['date'].strftime('%d.%m.%Y')}: {int(row['predicted_price']):,} —Ä—É–±.\n"
        
        plot_buf = generate_plots(
            train_data, 
            test_data, 
            predictions,
            focus_date=user_data['date'],
            periods=periods
        )
        
        bot.send_photo(message.chat.id, photo=plot_buf)
        bot.send_message(message.chat.id, response)
        user_state.pop(message.chat.id, None)
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12:"
        )
        bot.register_next_step_handler(message, process_periods)
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        user_state.pop(message.chat.id, None)

def start_bot():
    while True:
        try:
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
            bot.polling(none_stop=True, interval=3, timeout=30)
        except requests.exceptions.ReadTimeout:
            print("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫...")
            time.sleep(5)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫...")
            time.sleep(15)

if __name__ == "__main__":
    model, train_data, test_data, last_date = init_model()
    start_bot()