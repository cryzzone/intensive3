# bot.py
import telebot
from telebot import types
import pandas as pd
from model import load_data, train_model, predict_future, plot_predictions
import datetime
import time
import requests
import sys

TOKEN = "7923521036:AAHcSpyCU-y8-YmRQQfOyx43ZfupNn-LFAc"
bot = telebot.TeleBot(TOKEN, threaded=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
class States:
    WAITING_DATE = 1
    WAITING_PERIODS = 2

user_state = {}
predictions_data = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
def init_model():
    try:
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...")
        train, test = load_data()
        model, train_with_predictions = train_model(train)  # –¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ–º –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è
        last_date = test['date'].iloc[-1] if not test.empty else train['date'].iloc[-1]
        print("–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        return model, train_with_predictions, test, last_date
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        sys.exit(1)

model, train_data, test_data, last_date = init_model()

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
    btn2 = types.KeyboardButton("–ê–≤—Ç–æ–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –Ω–µ–¥–µ–ª—å")
    markup.add(btn1, btn2)
    
    bot.send_message(
        message.chat.id,
        "üîÆ –ë–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "- '–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑' - –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é –¥–∞—Ç—É –∏ –ø–µ—Ä–∏–æ–¥\n"
        "- '–ê–≤—Ç–æ–ø—Ä–æ–≥–Ω–æ–∑' - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –Ω–µ–¥–µ–ª—å –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–∑–≤–µ—Å—Ç–Ω–æ–π –¥–∞—Ç—ã",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == "–ê–≤—Ç–æ–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –Ω–µ–¥–µ–ª—å")
def auto_predict(message):
    try:
        bot.send_chat_action(message.chat.id, 'typing')
        predictions = predict_future(model, last_date, periods=6)
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        response = "üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –Ω–µ–¥–µ–ª—å:\n\n"
        for _, row in predictions.iterrows():
            response += f"üìÖ {row['date'].strftime('%d.%m.%Y')}: {int(row['predicted_price']):,} —Ä—É–±.\n"
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
        plot_buf = plot_predictions(train_data, test_data, predictions)
        
        bot.send_message(message.chat.id, response)
        bot.send_photo(message.chat.id, photo=plot_buf, caption="–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")

@bot.message_handler(func=lambda m: m.text == "–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
def start_custom_predict(message):
    msg = bot.send_message(
        message.chat.id,
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2023):"
    )
    user_state[message.chat.id] = States.WAITING_DATE
    bot.register_next_step_handler(msg, process_date)

def process_date(message):
    try:
        input_date = datetime.datetime.strptime(message.text, "%d.%m.%Y")
        predictions_data[message.chat.id] = {'date': input_date}
        
        msg = bot.send_message(
            message.chat.id,
            "‚è≥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–æ—Ç 1 –¥–æ 12):"
        )
        user_state[message.chat.id] = States.WAITING_PERIODS
        bot.register_next_step_handler(msg, process_periods)
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
        )
        bot.register_next_step_handler(message, process_date)

def process_periods(message):
    try:
        periods = int(message.text)
        if not 1 <= periods <= 12:
            raise ValueError
        
        user_data = predictions_data[message.chat.id]
        bot.send_chat_action(message.chat.id, 'typing')
        predictions = predict_future(model, user_data['date'], periods)
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        response = f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {periods} –Ω–µ–¥–µ–ª—å —Å {user_data['date'].strftime('%d.%m.%Y')}:\n\n"
        for _, row in predictions.iterrows():
            response += f"üìÖ {row['date'].strftime('%d.%m.%Y')}: {int(row['predicted_price']):,} —Ä—É–±.\n"
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
        plot_buf = plot_predictions(train_data, test_data, predictions)
        
        bot.send_message(message.chat.id, response)
        bot.send_photo(message.chat.id, photo=plot_buf, caption="–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É")
        user_state.pop(message.chat.id, None)
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12:"
        )
        bot.register_next_step_handler(message, process_periods)
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∞.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        user_state.pop(message.chat.id, None)

def start_bot():
    while True:
        try:
            print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            bot.polling(none_stop=True, interval=3, timeout=30)
        except requests.exceptions.ReadTimeout:
            print("–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)
        except requests.exceptions.ConnectionError:
            print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
        except Exception as e:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)

if __name__ == "__main__":
    start_bot()